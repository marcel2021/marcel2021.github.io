{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","photos","setPhotos","openLightbox","useCallback","event","photo","index","useEffect","fetch","Date","getTime","then","response","json","jsonData","i","j","length","src","date","catch","error","console","columns","window","innerWidth","onClick","direction","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAkEeA,MA9Df,WAAgB,IAAD,EAC2BC,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,EAAeC,uBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDT,EAAgBS,GAChBP,GAAgB,KACf,IAgCH,OAhBAQ,qBAAU,WACRC,MAAM,6BAA4B,IAAIC,MAAOC,WAC5CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAEL,IAAK,IAAIC,EAAE,EAAGC,EAAEF,EAASd,OAAOiB,OAAQF,EAAIC,EAAGD,IAC7CD,EAASd,OAAOe,GAAGG,KAAnB,gBAAmCJ,EAASK,MAE9ClB,EAAUa,EAASd,WAEpBoB,OAAM,SAACC,GAENC,QAAQD,MAAMA,QAEf,IAGCrB,EAAOiB,OAAS,GAChB,gCACE,cAAC,IAAD,CAASM,QA5BG,WAChB,OAAIC,OAAOC,WAAa,KACf,EACAD,OAAOC,WAAa,IACpB,EAEA,GAsBwBzB,OAAQA,EAAQ0B,QAASxB,EAAcyB,UAAU,WAC9E,cAAC,IAAD,UACG7B,EACC,cAAC,IAAD,CAAO8B,QApCK,WACpB/B,EAAgB,GAChBE,GAAgB,IAkCR,SACE,cAAC,IAAD,CACE8B,aAAcjC,EACdkC,MAAO9B,EAAO+B,KAAI,SAAAC,GAAC,kCACdA,GADc,IAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,eAIf,WChDCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8e3332c3.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Gallery from \"react-photo-gallery\";\r\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\r\n\r\nfunction App() {\r\n  const [currentImage, setCurrentImage] = useState(0);\r\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\r\n  const [photos, setPhotos] = useState([])\r\n\r\n  const openLightbox = useCallback((event, { photo, index }) => {\r\n    setCurrentImage(index);\r\n    setViewerIsOpen(true);\r\n  }, []);\r\n\r\n  const closeLightbox = () => {\r\n    setCurrentImage(0);\r\n    setViewerIsOpen(false);\r\n  };\r\n\r\n  const setColumn = () => {\r\n    if (window.innerWidth > 1200)\r\n      return 3\r\n    else if (window.innerWidth > 650)\r\n      return 2;\r\n     else\r\n      return 1;\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch('/PhotosDatabase.json?ver='+new Date().getTime())\r\n    .then(response => response.json())\r\n    .then((jsonData) => {\r\n      // jsonData is parsed json object received from url\r\n      for( let i=0, j=jsonData.photos.length; i < j; i++)\r\n        jsonData.photos[i].src += `?data=${jsonData.date}`\r\n        \r\n      setPhotos(jsonData.photos)\r\n    })\r\n    .catch((error) => {\r\n      // handle your errors here\r\n      console.error(error)\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n      photos.length > 0 && \r\n      <div>\r\n        <Gallery columns={setColumn} photos={photos} onClick={openLightbox} direction=\"column\"/>\r\n        <ModalGateway>\r\n          {viewerIsOpen ? (\r\n            <Modal onClose={closeLightbox}>\r\n              <Carousel\r\n                currentIndex={currentImage}\r\n                views={photos.map(x => ({\r\n                  ...x,\r\n                  srcset: x.srcSet,\r\n                  caption: x.title\r\n                }))}\r\n              />\r\n            </Modal>\r\n          ) : null}\r\n        </ModalGateway>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}